package stephen.mckillop.asgn1.server;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

import stephen.mckillop.asgn1.exceptions.CourseNotFoundException;
import stephen.mckillop.asgn1.exceptions.DuplicateCourseException;
import stephen.mckillop.asgn1.exceptions.InvalidDataException;
import stephen.mckillop.asgn1.setup.CatalogManager;
import stephen.mckillop.asgn1.setup.Course;

public class CourseServerThread implements Runnable {
		private Socket socket = null;
		BufferedReader in = null;
		PrintWriter out = null;
		String request = null;
		
		public CourseServerThread(Socket socket) {
			this.socket = socket;
		}
		
		@Override
		public void run() {
			// TODO Auto-generated method stub
			try {
				// new socket and streams for each request
				in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
				out = new PrintWriter(socket.getOutputStream(), true);
				// read request and echo to console
				request = in.readLine().trim();
				System.out.println("{" + request + "}");
				// request starts "GET" "ADD" "DELETE" or "UPDATE"
				String command = request.substring(0, request.indexOf(" ")).toUpperCase();
				
				if (command.equals("GET")) {
					getCourse(request, out);
				} else if (command.equals("ADD")) {
					addCourse(request, out);
				} else if (command.equals("DELETE")) {
					deleteCourse(request, out);
				} else if (command.equals("UPDATE")) {
					updateCourse(request, out);
				} else {
					out.println("ERROR command " + command + " not supported");
				}
				socket.close();
			} catch (IOException e) {
				System.out.println("Server side I/O exception on socket");
			}
		}
		
		private void getCourse(String request, PrintWriter out) {
			try {
				String courseCode = request.substring(request.indexOf(" ")).trim();
				Course course = CatalogManager.getInstance().getCourse(courseCode);
				out.println(course);
			} catch (CourseNotFoundException e) {
				out.println("ERROR " + e.getMessage());
			}
		}

		private void addCourse(String request, PrintWriter out) {
			try {
				Course course = buildCourse(request);
				CatalogManager.getInstance().addCourse(course);
				out.println(course);
			} catch (DuplicateCourseException | InvalidDataException e) {
				out.println("ERROR " + e.getMessage());
			}
		}

		public void deleteCourse(String request, PrintWriter out) {
			try {
				String courseCode = request.substring(request.indexOf(" ")).trim();
				Course course = CatalogManager.getInstance().deleteCourse(
						courseCode);
				out.println(course);
			} catch (CourseNotFoundException e) {
				out.println("ERROR " + e.getMessage());
			}
		}

		public void updateCourse(String request, PrintWriter out) {
			try {
				Course course = buildCourse(request);
				CatalogManager.getInstance().updateCourse(course);
				out.println(course);
			} catch (CourseNotFoundException | InvalidDataException e) {
				out.println("ERROR " + e.getMessage());
			}
		}

		public Course buildCourse(String request)
				throws InvalidDataException {
			// Get data from the request and build a local course object
			try {
				String courseCode = request.substring(request.indexOf(" ")).trim();
				Course course = new Course(courseCode);
				return course;
			} catch (InvalidDataException e) {
				System.out.println("ERROR " + e.getMessage());
				return null;
			}
			
		}
}
