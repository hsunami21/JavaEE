package binary.search.game.model;

import binary.search.game.exceptions.ExcessGuessesException;

public class BinarySearch {
	// constants for all games
	private static final int maxGuesses = 10;
	private static final int lowBound =0;
	// upper limit is 1001 to allow for rounding in calculating next guess
	private static final int highBound = 1001;
	
	// state of a game in progress
	private int guess;
	private int count;
	private int lowNumber;
	private int highNumber;

	// start a new game
	public BinarySearch() {
		count = 0;
		lowNumber = lowBound;
		highNumber = highBound;
	}
	
	// calculate the next guess made by computer
	public int nextGuess() throws ExcessGuessesException {
		incrementCount();
		setGuess((lowNumber + highNumber) / 2);
		return guess;
	}

	// adjust range of number if last guess was too low
	public int tooLow() throws ExcessGuessesException {
		lowNumber = getGuess();
		return nextGuess();
	}

	// adjust range of number if last guess was too high
	public int tooHigh() throws ExcessGuessesException {
		highNumber = getGuess();
		return nextGuess();
	}

	// increment count and check number of guesses
	private void incrementCount() throws ExcessGuessesException {
		setCount( getCount()+1);
		if ( count > maxGuesses ){
			throw new ExcessGuessesException();
		}
	}
	
	// standard setters and guesser for JavaBean
	public int getGuess() {
		return guess;
	}

	private void setGuess(int guess) {
		this.guess = guess;
	}

	public int getCount() {
		return count;
	}
	
	private void setCount( int count) {
		this.count = count;
	}
}
