package wendall.stephen.asgn3.data;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import college.courses.exceptions.InvalidDataException;

@Entity
@Table (name="PROFESSOR", schema="COLLEGE")
public class Professor {
	@NotNull
	private String firstName = null;
	@NotNull
	private String lastName = null;
	@Id
	@OneToMany (mappedBy="professor", fetch=FetchType.LAZY, cascade=CascadeType.REMOVE)
	@JoinColumn (name="PROF_ID")
	private int profId =0 ;
	
	public Professor() throws InvalidDataException {
		
	}
	
	// professor created with no profId when creating a new professor
	// primary key profId set by database using autoincrement
	public Professor( String firstName, String lastName)
			throws InvalidDataException {
		setFirstName(firstName);
		setLastName(lastName);
	}

	// professor created with profId when building with data from database
	public Professor( int profId, String firstName, String lastName)
			throws InvalidDataException {
		this(firstName, lastName);
		setProfId(profId);
	}

	public void setProfId( int profId) throws InvalidDataException {
		if ( profId < 1000 || profId > 1999) {
			throw new InvalidDataException("Proressor must have 4-digit ID starting 1ddd");
		}
		this.profId = profId;
	}
	
	public int getProfId () {
		return profId;
	}
	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) throws InvalidDataException {
		if (firstName == null || firstName.isEmpty()) {
			throw new InvalidDataException("Proressor must have a first name");
		}
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) throws InvalidDataException {
		if (lastName == null || lastName.isEmpty()) {
			throw new InvalidDataException("Proressor must have a last name");
		}
		this.lastName = lastName;
	}
	public String toString() {
		return firstName + " " + lastName;
	}
	
	public boolean equals( Professor p) {
		if ( ! getFirstName().equals(p.getFirstName() ) ) {
			return false;
		}
		if ( ! getLastName().equals(p.getLastName() ) ) {
			return false;
		}
		if ( getProfId() == p.getProfId() ) {
			return true;
		}
		// 2 profs with same name if profId not yet set for either of them
		return ( getProfId() == 0 || p.getProfId() == 0 ) ;
	}
}
