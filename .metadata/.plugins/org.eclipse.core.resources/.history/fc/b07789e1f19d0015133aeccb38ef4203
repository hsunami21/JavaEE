package wendall.stephen.election.beans;

import java.util.List;

import javax.ejb.Stateless;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import election.web.exceptions.ElectionException;
import election.web.model.ElectoralRoll;
import online.election.entities.Candidate;
import online.election.entities.Voter;
import online.election.exceptions.CandidateException;

/**
 * Session Bean implementation class ElectionManager
 */
@Stateless
public class ElectionManager implements ElectionManagerLocal {
	@PersistenceContext (name = "WendallStephenElectionEntities")
	EntityManager em;

    /**
     * Default constructor. 
     */
	private ElectionManager() throws ElectionException {
		try {
			InitialContext ctx = new InitialContext();
			emf = (EntityManagerFactory) ctx.lookup("java:/ElectionEMF");
		} catch (NamingException ne) {
			throw new ElectionException("JNDI lookup for java:/ElectionEMF failed");
		}


	// A transaction is required to update both VOTER and CANDIDATE tables
	// Advanced thought: transactional processing should ensure vote count not corrupted
	// by multithreading but that may depend on locking strategy of database
	// Synchronizing this method could hurt performance at peak voting times
	public void castBallot(String voterName, String candidateName) throws ElectionException, CandidateException {
//		EntityManager em = emf.createEntityManager();
//		EntityTransaction et = em.getTransaction();
//		et.begin();
//		try {
			Query q = em.createNamedQuery("getCandidateByName");
			q.setParameter("candidateName", candidateName);
			List<Candidate> candidates = q.getResultList();
			if (candidates.size() != 1) {
				// assuming all candidates have a unique name
				throw new ElectionException("Attempt to vote for unknown candidate");
			}
			Candidate candidate = candidates.get(0);
			candidate.setVotes(candidate.getVotes() + 1);
			Voter voter = new ElectoralRoll().getVoterByName(em, voterName);
			if (voter.isVoted()) {
				throw new ElectionException("Attempt to vote twice: " + voterName);
			}
			voter.setVoted(true);
			// em.merge(voter);           implied
			// em.merge(candidate);       implied
//			et.commit();
//		} catch (ElectionException | CandidateException exception) {
//			et.rollback();
//			throw exception;
//		} finally {
//			em.close();
//		}
	}
}
